name: "Main"

on:
  push:
    branches: [main]

env:
  NODE_VERSION: 14.x

jobs:

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    name: Test on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: npm install
      
        
  release-publish:
    runs-on: ubuntu-latest
    environment: publishing
    needs: test
    name: Package-Release-Publish
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: setup node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: install node deps
        run: npm ci

      - name: publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: npx semantic-release

      # - name: install teem keys
      #   run: echo "${{ secrets.TEEM_KEY }}" >> TEEM_KEY

      # - name: get extension path
      #   run: echo "VSIX_PATH=$(find . -maxdepth 1 -type f -iname "*.vsix" | head -1)" >> $GITHUB_ENV

      # - name: get extension name
      #   run: echo "VSIX_NAME=$(basename $(find . -maxdepth 1 -type f -iname "*.vsix" | head -1))" >> $GITHUB_ENV

      # - name: get extension version
      #   run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        
      # - name: create upload artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     path: ${{ env.VSIX_PATH }}
      #     name: ${{ env.VSIX_NAME }}

      # - name: create github release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      #   run: npm -g install @semantic-release/git semantic-release && semantic-release

      # - name: create github release
      #   uses: actions/create-release@v1
      #   id: create_release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: v${{ env.PACKAGE_VERSION }}
      #     release_name: ${{env.PACKAGE_VERSION }}
      #     body: See [CHANGE LOG](https://github.com/f5devcentral/f5-corkscrew/blob/main/CHANGELOG.md) for details.
      #     draft: false
      #     prerelease: false


      # - run: npm publish --access public
      #   env:
      #     NODE_AUTH_TOKEN: ${{secrets.NPM_PUBLISH_TOKEN}}
      
      # - name: upload releases
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PUBLISH_TOKEN: ${{ secrets.MARKETPLACE_PUBLISH_KEY }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ${{ env.VSIX_PATH }}
      #     asset_name: ${{ env.VSIX_NAME }}
      #     asset_content_type: application/zip




# good example of action workflow for publishing an extension
# https://github.com/politie/omt-odt-language/pull/30/files#diff-87db21a973eed4fef5f32b267aa60fcee5cbdf03c67fafdc2a9b553bb0b15f34

# vsce source for understanding switches
# https://github.com/microsoft/vscode-vsce/tree/main/src

# ovsx source
# https://github.com/eclipse/openvsx

# another ci/cd example
# https://dev.to/shaimendel/vs-code-extension-building-auto-ci-cd-with-github-actions-2dmf
# https://github.com/shaimendel/vscode-plugin-cicd-github-actions/blob/master/.github/workflows/ci.yaml